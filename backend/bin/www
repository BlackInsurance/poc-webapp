#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

var server = require('../dist/server');
var debug = require('debug')('backend:server');



/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3002');
var app = server.Server.bootstrap().app;
app.set('port', port);




var webServer = null;



if ( process.env.RUNTIME_ENVIRONMENT == 'DEV' ) {
  var fs = require('fs');
  var https = require('https');
  webServer = https.createServer({
    key: fs.readFileSync('./backend/bin/localhost.key'),
    cert: fs.readFileSync('./backend/bin/localhost.crt'),
    requestCert: false,
    rejectUnauthorized: false
  }, app);
} else {
  var http = require('http');
  webServer = http.createServer(app);
}


webServer.listen(port);
webServer.on('error', onError);
webServer.on('listening', onListening);













/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = webServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
